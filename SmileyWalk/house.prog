'use strict'

class House
{
    x = 0;
    y = 0;
    stepSize = 1;
    theta = 0;
    strokeColor = 'black';
    houseColor = 'orange';
    chimmneyColor = 'Brown';
    windowColor = 'grey';
    roofColor = 'blue';
    scaleValue = 1;

    constructor()
    { 
    }
    
    set strokeColor(newColor)
    {
        this.strokeColor = newColor;
    }

    set Positionx(newx)
    {
        this.x = newx;
    }

    set PositionY(newY)
    {
        this.Y = newY;
    }
    
    set ScaleValue(newScale)
    {
        this.scaleValue = newScale;
    }

    set HouseColor(newColor)
    {
        this.houseColor = newColor;
    }

    set RoofColor(newColor)
    {
        this.roofColor = newColor;
    }

    set ChimmneyColor(newColor)
    {
        this.chimmneyColor = newColor;
    }

    set WindowColor(newColor)
    {
        this.windowColor = newColor;
    }

    Right()
    {
        this.theta--;
    }

    Left()
    {
        this.theta++;
    }

    Display(ctx, which)
    {
        if(which == 1)
        {
            this.Home1(ctx)
        }
        else
        {
            this.Home2(ctx)
        }
    }

    //home option 1
    Home1(ctx)
    {
        ctx.save();
        ctx.translate(this.x,this.y);
        ctx.rotate(this.theta*CF);
        ctx.scale(this.scaleValue, this.scaleValue);
        ctx.strokeStyle = this.strokeColor;
        ctx.fillStyle = this.houseColor;
        ctx.lineWidth = 3;
        
        ctx.beginPath();
        ctx.rect(0,0, 190, -320);
        ctx.fill();
        ctx.stroke();
        
        ctx.fillStyle = this.windowColor;
        
        ctx.beginPath();
        ctx.rect(80, -110, 80, -80);
        ctx.moveTo(120, -110);
        ctx.lineTo(120, -190);
        ctx.moveTo(80, -150);
        ctx.lineTo(160, -150);
        ctx.fill();
        ctx.stroke();
        
        ctx.fillStyle = this.chimmneyColor;
        
        ctx.beginPath();
        ctx.moveTo(0, -320);
        ctx.lineTo(0, -420);
        ctx.lineTo(30, -420);
        ctx.lineTo(30, -320);
        ctx.fill();
        ctx.stroke();
        
        ctx.fillStyle = this.roofColor;
        
        ctx.beginPath();
        ctx.moveTo(-50, -320);
        ctx.lineTo(95, -440);
        ctx.lineTo(250, -320);
        ctx.lineTo(-50, -320);
        ctx.fill();
        ctx.stroke();
        
        ctx.beginPath();
        ctx.moveTo(190, -200);
        ctx.lineTo(240, -180);
        ctx.lineTo(190, -180);
        ctx.lineTo(190,-200);
        ctx.fill();
        ctx.stroke();
        
        ctx.restore();
    }

    //home option 2
    Home2(ctx)
    {
        ctx.save();
        ctx.translate(this.x,this.y);
        ctx.rotate(this.theta*CF);
        ctx.scale(this.scaleValue, this.scaleValue);

        ctx.strokeStyle = this.strokeColor;
        ctx.fillStyle = this.houseColor;
        ctx.lineWidth = 3;
        
        ctx.beginPath();
        ctx.rect(0,0, 200, -320);
        ctx.fill();
        ctx.stroke();
        
        ctx.fillStyle = this.windowColor;
        
        ctx.beginPath();
        ctx.rect(40, -110, 70, -40);
        ctx.rect(40, -150, 70, -50);
        ctx.fill();
        ctx.stroke();
        
        ctx.fillStyle = this.roofColor;
        
        ctx.beginPath();
        ctx.moveTo(-40, -320);
        ctx.lineTo(210, -450);
        ctx.lineTo(210, -320);
        ctx.lineTo(-40, -320);
        ctx.fill();
        ctx.stroke();
        
        ctx.beginPath();
        ctx.moveTo(0, -220);
        ctx.lineTo(-70, -180);
        ctx.lineTo(0, -185);
        ctx.lineTo(0, -220);
        ctx.fill();
        ctx.stroke();
        
        ctx.restore();
    }
}