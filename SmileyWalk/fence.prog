'use strict'

class Fence
{
    
    x = 0;
    y = 0;
    stepSize = 1;
    theta = 0;
    strokeColor = 'black';
    fenceColor = 'brown';
    scaleValue = 1;
    fenceSegments = 5;
    
    constructor()
    { 
    }
    
    set strokeColor(newColor)
    {
        this.strokeColor = newColor;
    }

    set Positionx(newx)
    {
        this.x = newx;
    }

    set PositionY(newY)
    {
        this.Y = newY;
    }
    
    set ScaleValue(newScale)
    {
        this.scaleValue = newScale;
    }

    set FenceSegments(newSegs)
    {
        this.fenceSegments = newSegs;
    }

    Right()
    {
        this.theta--;
    }

    Left()
    {
        this.theta++;
    }

    Display(ctx)
    {
        ctx.save();
        ctx.translate(this.x,this.y);
        ctx.rotate(this.theta*CF);
        ctx.scale(this.scaleValue, this.scaleValue);

        ctx.strokeStyle = this.strokeColor;
        ctx.fillStyle = this.fenceColor;
        ctx.lineWidth = 3;
        
        let i = 0
        
        for(i; i < this.fenceSegments; i++)
        {
            
            ctx.beginPath();
            ctx.moveTo(0 + (150 * i), 0 );
            ctx.lineTo(0 + (150 * i), 140 );
            ctx.lineTo(20 + (150 * i), 140);
            ctx.lineTo(20 + (150 * i), 0);
            ctx.lineTo(0 + (150 * i), 0);
            ctx.fill();
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(20  + (150 * i), 60);
            ctx.lineTo(20  + (150 * i), 80);
            ctx.lineTo(150  + (150 * i), 80);
            ctx.lineTo(150  + (150 * i), 60);
            ctx.lineTo(20  + (150 * i), 60);
            ctx.fill();
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(20  + (150 * i), 20);
            ctx.lineTo(20  + (150 * i), 40);
            ctx.lineTo(150  + (150 * i), 40);
            ctx.lineTo(150  + (150 * i), 20);
            ctx.lineTo(20  + (150 * i), 20);
            ctx.fill();
            ctx.stroke();
        }
        
        ctx.beginPath();
        ctx.moveTo(0 + (150 * i), 0 );
        ctx.lineTo(0 + (150 * i), 140 );
        ctx.lineTo(20 + (150 * i), 140);
        ctx.lineTo(20 + (150 * i), 0);
        ctx.lineTo(0 + (150 * i), 0);
        ctx.fill();
        ctx.stroke();
        
        ctx.restore();
    }   
}