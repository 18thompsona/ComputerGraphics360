'use strict'

//const IMAGE_PATH = "img/";

class Treasure {
   treasures = [];

   constructor (canvasName, space = 10, count = 10, imageName, width, height) {
       this.canvas = document.getElementById(canvasName);
       this.ctx = this.canvas.getContext('2d');
       
       this.image = document.createElement('img');
       this.image.src = IMAGE_PATH + imageName;
       
       this.canDraw = true;
       
       this.image.addEventListener('load', this, false);

       this.cWidth = this.canvas.width;
       this.cHeight = this.canvas.height;

       this.count = Math.min(count, 5);
       this.minSpace = space;

       var i = 0;
       var attempt = 0;
       let x1, y1
       let x2, y2;
       this.w = width
       this.h = height; 

       while (i < this.count && attempt < 1000) 
       {
           // then the position
           x1 = 1 * space + Math.floor(Math.random()*(this.cWidth - this.w -  space)); 
           y1 = 1 * space + Math.floor(Math.random()*(this.cHeight - this.h - 3 * space)); 

           // other end positions
           x2 = x1 + this.w;
           y2 = y1 + this.h;

           if (this.Safe([x1-space,y1-space,x2+space,y2+space,this.w,this.h]))
           {
              this.treasures.push([x1,y1,x2,y2,this.w,this.h]);
              i++;
           } else
           {
              attempt++;
           }
       }

       this.Display();
    }

    
    handleEvent(e)
    {
        this.canDraw = true;
        this.Display();

        return;
    }


   Display() {
       var i;
       
       if (this.canDraw)
       {

           for(i = 0; i< this.treasures.length; i++) 
           {
               this.ctx.beginPath();
               this.ctx.fillStyle = "blue";
               this.ctx.strokeStyle = "black";

               this.ctx.drawImage(this.image, this.treasures[i][0], this.treasures[i][1]);
           }
       }
       return;
   }
   
   Redraw()
   {
    for(let i = 0; i< this.treasures.length; i++) 
           {
               this.ctx.beginPath();
               this.ctx.fillStyle = "blue";
               this.ctx.strokeStyle = "black";

               this.ctx.drawImage(this.image, this.treasures[i][0], this.treasures[i][1]);
           }
   }

   Between(small, large, pt){
      return ( small <= pt && pt <= large);
   }

   Inside(x,y, a) {
      let x0 = a[0];
      let y0 = a[1];
      let x1 = a[2];
      let y1 = a[3];

      let insideX = this.Between(x0, x1, x);
      let insideY = this.Between(y0, y1, y);
      return (insideX && insideY);
   }

   PointInside(a,b) {

       let x0 = a[0];
       let y0 = a[1];
       let x1 = a[2];
       let y1 = a[3];

       // x0, y0
       if (this.Inside(x0, y0, b)) {
          return true;
       } 

       // x1, y0
       if (this.Inside(x1, y0, b)) {
          return true;
       } 

       // x0, y1
       if (this.Inside(x0, y1, b)) {
          return true;
       } 

       // x1, y1
       if (this.Inside(x1,y1, b)) {
          return true;
       } 

       return false;
   }

   Overlap(a,b){
       let h1 = this.Between(a[0],a[2], b[0]) || this.Between(a[0],a[2],b[2]);
       let v1 = this.Between(b[1],b[3], a[1]) || this.Between(b[1],b[3],a[3]);

       return h1 && v1;
   }

   Collide(a,b){
      let pointInside =  this.PointInside(a,b) || this.PointInside(b,a);
      let overlap =  this.Overlap(a,b) || this.Overlap(b,a);

      return  pointInside || overlap;
   }

   Safe(ary) {
      let i;
      let ok = true;

      for(i = 0; i < this.treasures.length; i++) {
         if ( this.Collide( ary, this.treasures[i]) ) {
            ok = false;
         }
      }
      return ok;
   }

   Distance(x1, y1, x2, y2) {
      let dx = x1 - x2;
      let dy = y1 - y2;

      return Math.sqrt(dx*dx + dy*dy);
   }

    
    NewTreasure(instance)
    {
        let i = 0, attempt = 0;
        let x1, y1
        let x2, y2;
        let space = this.minSpace;
        
        while (i < this.count && attempt < 1000) {

           // then the position
           x1 = 1 * space + Math.floor(Math.random()*(this.cWidth - this.w -  space)); 
           y1 = 1 * space + Math.floor(Math.random()*(this.cHeight - this.h - 3 * space)); 

           // other end positions
           x2 = x1 + this.w;
           y2 = y1 + this.h;

           if (this.Safe([x1-space,y1-space,x2+space,y2+space,this.w,this.h])) {
              this.treasures[instance] = [x1,y1,x2,y2,this.w,this.h];
              i++;
           } else {
              attempt++;
           }
       }
        
        this.Display();
        
    }

    Interacted(ary)
    {
        let i = 0;
        let instance = 0;
        for(i; i < this.treasures.length; i++)
        {
            if (this.Collide(ary, this.treasures[i])) 
            {
                instance = i;
            }
        }
        
        this.RemoveTreasure(instance);
        this.NewTreasure(instance);
    }

    RemoveTreasure(i)
    {
        this.ctx.clearRect(this.treasures[i][0], this.treasures[i][1],this.w ,this.h);
    }

    get TreasureLocation()
    {
        return this.treasures;
    }

}